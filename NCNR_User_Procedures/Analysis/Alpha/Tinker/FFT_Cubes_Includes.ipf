#pragma rtGlobals=1		// Use modern global access method.#include "FFT_Panel"#include "FFT_Cubes"#include "FFT_VoxelDisplay"#include "FFT_FillMatrixShapes"#include "FFT_Debye_Spheres"#include "FFT_Cylinder_Fills"#include "FFT_Cylinder_2D_Fill"#include "FFT_Plane_Fills"#include "FFT_Lattice_Fills"#include "FFT_Sphere_Fills"#include "FFT_FillTests"		// testing and example routines (MAR 2012)#include "FFT_ConcentratedSpheres"#include "FFT_ConnectedRods"Init_FFT()Menu "Macros"	"-"	"Init_FFT"	Submenu "Matrix Info"		"Number of Points"//		"Fill Statistics"			//only valid for concentrated spheres...		"Center_to_Center"		"Davg_to_Np"	end	Submenu "3D Examples"		"Polydisperse Spheres"		"Connect Dots 3D"		"Put Random Cylinders at Points"		"Put X-axis Cylinders at Points"		"Put X-axis Cylinders Square Grid",PutXAxisCylindersSquare()		"Put X-axis Cylinders Hexagonal Grid",PutXAxisCylindersHexagonal()		"Core-shell Cylinders Hex Grid",PutXAxisCoreShellCyl_HexGrid()		"-"		"Anisotropic_FFT_to_USANS"		"Isotropic_FFT_to_USANS"	end	Submenu "Matrix Viewing"//		"ParseMatrix 3D to XYZ"//		"Plot XYZ"			//replaced by Gizmo		"Animated Slices"//		"Show Full Matrix"	end	Submenu "Automation Examples"//		"Hexagonal Cylinders"//		"Conc Sphere Loop"//		"-"//		"Overnight"	end//	Submenu "2D testing"//		"Test 2D"//		"Connect Dots 2D"//		"Erase 2D"//	end//	"-"//	"Include FFT Fit Functions"		//automatically loaded now...End// analysis must be loaded firstProc IncludeFFTFitFunctions()	NCNR_AnalysisLoader("Load NCNR Analysis Macros")	Execute/P "INSERTINCLUDE \"FFT_Fit_Includes\""	Execute/P "COMPILEPROCEDURES "end////// examples of different structures, shapes and techniques for generating structures// other examples that could be added are:// -- a tetrahedron w/ 4 different colors (rotation, transformation)// -- core-shell spheres// -- binary (touching) spheres of different SLD (would make a simple fit function too)// -- ? other// -- orientation-dependent structures vs. 2D analytic// -- simple automation examplesProc PolydisperseSpheres(nSph,rad,pd,nPass,tagStr)	Variable nSph=505,rad=20,pd=0.25,nPass=10	String tagStr="_Poly"// nSph = number of LARGE spheres to add (not the voxel size)// rad = mean radius of these large spheres// pd = polydispersity (0,1)// nPass = number of repeat averaging passes// tagStr = extension string for the output name = "iBin"+tagStr	TestConcSpheres(nSph,rad,pd,nPass,tagStr)	Display $("iBin"+tagStr) vs $("qBin"+tagStr)	ModifyGraph grid=1,mirror=2,log=1	ModifyGraph mode=4,marker=2,msize=2	LegendEndProc PutXAxisCoreShellCyl_HexGrid(w,rad,len,sep,fill)	String w="mat"	Variable rad=30,len=300,sep=100,fill=10	Prompt w,"matrix"	prompt rad,"radius of cylinders"	prompt len,"length of cylinders"	prompt sep,"center-to-center separation of cylinders"	Prompt fill,"fill SLD value"	//	$w=0	X_CoreShellCylinderHexGrid($w,rad,len,sep,fill)		NumberOfPoints()endFunction X_CoreShellCylinderHexGrid(mat,rad,len,sep,fill)	Wave mat	variable rad,len		//length of cylinders	Variable sep			// EDGE separation, in same units as cylinder	Variable fill		NVAR 	solventSLD = root:FFT_SolventSLD		NVAR grid=root:FFT_T	Variable np,spacing	np = DimSize(mat,0)			// assumes that all dimensions are the same		// fill a 2D plane with points	Make/O/B/N=(np,np) plane	plane = solventSLD	spacing = round(sep/grid)		// so it's an integer	FillPlaneHexagonal(plane,spacing,fill)		// put it in the proper plane of the matrix	mat[np/2][][] = plane[q][r]			// in the YZ plane		ParseMatrix3D_rho(mat)	Wave x3d=x3d	Wave y3d=y3d	Wave z3d=z3d		Variable ii=0,num	num = numpnts(x3d)			for(ii=0;ii<num;ii+=1)		FillXCylinder(mat,grid,rad,x3d[ii],y3d[ii],z3d[ii],len,fill)		//cylinder 1	endfor// makes a crude core-shell cylinder		for(ii=0;ii<num;ii+=1)		FillXCylinder(mat,grid,rad-20,x3d[ii],y3d[ii],z3d[ii],len,3*fill)		//cylinder 1	endfor		return(0)End